//THIS FUNCTION SIMULATES A TIDEMAN ELECTION
//EACH VOTER RANKS CANDIDATES
//CANDIDATES ARE TAKEN AS A CLI AND EACH VOTER THEN PLUGS IN RANKS 1 THROUGH NUMBER OF CANDIDATES

#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
}
pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }

        record_preferences(ranks);

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}




// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
    for (int i = 0; i < candidate_count; i++) //check if vote is valid
    {
        if (strcmp(name,candidates[i]) == 0)
        {
            //count vote
            ranks[rank] = i; //record index of candidate they voted for (index of string array 'candidates')
            return true;
        }
    }
    return false;
}




// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    for (int i = 0; i < (candidate_count - 1); i++) // - 1 because last candidate in ranks does not need to record a win over anyone else
    {
        for (int j = i + 1; j < candidate_count; j++) //i + 1 so that j is always at least 1 greater than i for each i iteration
        {
            {
                preferences[ranks[i]][ranks[(j)]]++;
            }

        }

    }
    return;
}





// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    int h = 0;
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            if (preferences[i][j] > preferences[j][i])
            {
                pairs[h].winner = i;
                pairs[h].loser = j;
                h++;
            }
        }
    }
    pair_count = h;
    return;
}





// Sort pairs in decreasing order by strength of victory
void sort_pairs(void)
{

    pair tempForSwitch;
    int SOVCurrent;
    int SOVNextIndex;

    for (int j = 0; j < pair_count; j++)
    {
    //    largestSOVseen = strengthOfVictory[j]; //reset largestSOVseen to value of first strengthOfVictory looked at for the current pass
        for (int k = 0; k < pair_count - j - 1; k++) //minus one so last index doesnt compare to out of index, minus j so the later loops don't unecessarily check the already sorted numbers to the right
        {
            SOVCurrent = preferences[pairs[k].winner][pairs[k].loser] - preferences[pairs[k].loser][pairs[k].winner];
            SOVNextIndex = preferences[pairs[k + 1].winner][pairs[k + 1].loser] - preferences[pairs[k + 1].loser][pairs[k + 1].winner];

            if (SOVNextIndex > SOVCurrent)
            {
                tempForSwitch = pairs[k];
                pairs[k] = pairs[k + 1];
                pairs[k + 1] = tempForSwitch;
            }
        }
    }

    return;
}





// Lock pairs into the candidate graph in order, without creating cycles
void lock_pairs(void)
{

    int lockedTallyForCandidate;

    for (int i = 0; i < pair_count; i++)
    {
        lockedTallyForCandidate = 0;

        for (int j = 0; j < candidate_count; j++)
        {
            if (locked[pairs[i].loser][j] == false) //check if all possible edges (i -> j) originating FROM target candidate (loser) do not exist (a candidate cannot have an edge created pointing at them if one already comes from them)
            {
                lockedTallyForCandidate++;
            }
        }

        if (lockedTallyForCandidate == candidate_count) //if all possible edges from loser checked false
        {
            locked[pairs[i].winner][pairs[i].loser] = true; //create new edge
        }
    }
    return;
}





// Print the winner of the election
void print_winner(void)
{
    int edgeTally;

    for (int i = 0; i < candidate_count; i++)
    {
        edgeTally = 0;

        for (int j = 0; j < candidate_count; j++)
        {
            if (locked[j][i] == false) //if nothing point from j to i, or from other j to same i, or from other other j to same i...
            {
                edgeTally++;
            }
        }

        if (edgeTally == candidate_count)
        {
            printf("%s\n", candidates[i]);
        }
    }
    return;
}

